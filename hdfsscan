#!/usr/bin/env python

""" reads 1 byte from every hdfs block in files
    to determine if there's an unknown corruption """

import argparse, os, sys, time
import Queue, threading

HDFS_BLOCKSIZE = (64 * 1024 * 1024)		# minimal expected block size

filequeue = Queue.Queue()
badqueue = Queue.Queue()


class Config:
	dir = os.getcwd()
	out = '/home/hep/gattebury/badfiles.txt'
	threads = 1
	verbose = False
	def __repr__(self):
		return "\n--CONFIG--\n\tdir=%s\n\tout=%s\n\tthreads=%d\n\tverbose=%d\n\n" % \
             (self.dir, self.out, self.threads, self.verbose)
config = Config()


class NumChecked:
	def __init__(self):
		self.lock = threading.Lock()
		self.value = 0
	def increment(self):
		self.lock.acquire()
		self.value = value = self.value + 1
		self.lock.release()
		return value
numChecked = NumChecked()


class ThreadFile(threading.Thread):
	def __init__(self, queue, threadID):
		threading.Thread.__init__(self)
		self.queue = filequeue
		self.id = threadID

	def run(self):
		while True:
			file = self.queue.get()
			counter = numChecked.increment()
			if config.verbose:
				print "[ Q=%d  C=%d ] Thread %d: %s" % (self.queue.qsize(), counter, self.id, file)

			try:
				fp = open(file, 'r')
				while True:
					data = fp.read(1)
					if not data:
						break
					fp.seek(HDFS_BLOCKSIZE, 1)
				fp.close()
			except IOError as (errno, strerror):
				print "** I/O ERROR({0}): {1}".format(errno, strerror)
				badqueue.put(file)

			self.queue.task_done()



class ThreadBad(threading.Thread):
	def __init__(self, queue):
		threading.Thread.__init__(self)
		self.queue = badqueue

	def run(self):
		while True:
			badfile = self.queue.get()
			badfp = open(config.out, 'a', 1)
			badfp.write(badfile + "\n")
			badfp.close()

			self.queue.task_done()


def parseArgs():

	parser = argparse.ArgumentParser(description = 'Quickly scans through files to detect unreadable HDFS blocks')
	parser.add_argument('-d', '--dir', default=config.dir, help='Starting directory')
	parser.add_argument('-o', '--out', default=config.out, help='Output file')
	parser.add_argument('-t', '--threads', default=config.threads, help='Number of reader threads')
	parser.add_argument('-v', '--verbose', action='store_true', default=False, help='Output progress information')
	return parser.parse_args()


def main():

	args = parseArgs()
	config.dir = args.dir
	config.threads = int(args.threads)
	config.verbose = args.verbose

	if config.verbose:
		print "args=", args
		print config

	for i in range(config.threads):
		t = ThreadFile(filequeue, i)
		t.setDaemon(True)
		t.start()

	if config.verbose:
		print "Populating queue..."

	# if dir is a directory, walk, else assume file
	if os.path.isdir(config.dir):
		for root, dirs, files in os.walk(config.dir):
			for name in files:
				filequeue.put(os.path.join(root, name))
	else:
		filequeue.put(config.dir)

	bt = ThreadBad(badqueue)
	bt.setDaemon(True)
	bt.start()

	# wait on queue
	filequeue.join()
	badqueue.join()


if __name__ == '__main__':
	main()
